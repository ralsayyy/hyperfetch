#!/usr/bin/env bash

# kill the script if command errors out
set -e
# disable unicode
LC_ALL=C
LANG=C

function module_output {
  echo "$1" > "/run/user/$UID/hyperfetch/$2"
}

function logo {
  [ -e "distro/ascii-${ascii_distro}" ] && printf "${prefix_format}" && cat "distro/ascii-${ascii_distro}"
}

function model_info {
  module_output "$(</sys/devices/virtual/dmi/id/product_name)" "model"
}

function mem_fancy_info {
  free_mem=$(awk '/MemAvailable/ { printf "%.0f \n", $2 }' /proc/meminfo)
  total_mem=$(awk '/MemTotal/ { printf "%.0f \n", $2 }' /proc/meminfo)
  mem_percent=$(( ($total_mem - $free_mem) / ($total_mem / 100) ))
# from https://github.com/dylanaraps/pure-bash-bible
  ((elapsed=$mem_percent*15/100))
  printf -v prog  "%${elapsed}s"
  printf -v total "%$((15-elapsed))s"
  module_output "(${prog// / ●}${total// / ○} )" "mem_fancy"
}

function get_ascii_xy {
  # ascii width is (width of ascii art + 2)
  case "$1" in 
    "arch") ascii_width=34 ascii_height=15;;
    "gentoo") ascii_width=37 ascii_height=17;;
    *) ascii_width=0 ascii_height=0;;
  esac
}

function title_info {
  module_output "${prefix_format}$USER\e[m@${prefix_format}$HOSTNAME" "title"
}

function term_info {
  terminal=$(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))" )
    module_output "$terminal" "term"
}

function gpu_info {
  # from https://github.com/dylanaraps/neofetch
   # Read GPUs into array.
            gpu_cmd="$(lspci -mm | awk -F '\"|\" \"|\\(' \
                                          '/"Display|"3D|"VGA/ {a[$0] = $1 " " $3 " " $4}
                                           END {for(i in a) {if(!seen[a[i]]++) print a[i]}}')"
            IFS=$'\n' read -d "" -ra gpus <<< "$gpu_cmd"

            # Remove duplicate Intel Graphics outputs.
            # This fixes cases where the outputs are both
            # Intel but not entirely identical.
            #
            # Checking the first two array elements should
            # be safe since there won't be 2 intel outputs if
            # there's a dedicated GPU in play.
            [[ "${gpus[0]}" == *Intel* && "${gpus[1]}" == *Intel* ]] && unset -v "gpus[0]"

            for gpu in "${gpus[@]}"; do
                # GPU shorthand tests.
                [[ "$gpu_type" == "dedicated" && "$gpu" == *Intel* ]] || \
                [[ "$gpu_type" == "integrated" && ! "$gpu" == *Intel* ]] && \
                    { unset -v gpu; continue; }

                case $gpu in
                    *"Advanced"*)
                        brand="AMD"

                        gpu="${gpu/\[AMD\/ATI\] }"
                        gpu="${gpu/\[AMD\] }"
                        gpu="${gpu/OEM }"
                        gpu="${gpu/Advanced Micro Devices, Inc.}"
                        gpu="${gpu/*\[}"
                        gpu="${gpu/\]*}"
                        gpu="$brand $gpu"
                    ;;

                    *"NVIDIA"*)
                        gpu="${gpu/*\[}"
                        gpu="${gpu/\]*}"
                        gpu="NVIDIA $gpu"
                    ;;

                    *"Intel"*)
                        gpu="${gpu/*Intel/Intel}"
                        gpu="${gpu/\(R\)}"
                        gpu="${gpu/Corporation}"
                        gpu="${gpu/ \(*}"
                        gpu="${gpu/Integrated Graphics Controller}"
                        gpu="${gpu/*Xeon*/Intel HD Graphics}"

                        [[ -z "$(trim "$gpu")" ]] && gpu="Intel Integrated Graphics"
                    ;;

                    *"MCST"*)
                        gpu="${gpu/*MCST*MGA2*/MCST MGA2}"
                    ;;

                    *"VirtualBox"*)
                        gpu="VirtualBox Graphics Adapter"
                    ;;

                    *) continue ;;
                esac
              done
  module_output "$gpu" "gpu"
}

function cpu_info {
  cpu=$(awk -F ":" '/model name/ {printf "%s\n", $2}' /proc/cpuinfo | head -n 1)
  module_output "${cpu/\ }" "cpu"
}

function wm_info {
  module_output "$(wmctrl -m | awk -F ":" '/Name: / {printf "%s\n", $2}')" "wm"
}

function memory_info {
  free_mem=$(awk '/MemAvailable/ { printf "%.0f \n", $2/1024 }' /proc/meminfo)
  total_mem=$(awk '/MemTotal/ { printf "%.0f \n", $2/1024 }' /proc/meminfo)
  module_output "$(( $total_mem - $free_mem ))M / ${total_mem}M" "memory"
}

function shell_info {
  module_output "$SHELL" "shell"
}

function uptime_info {
  uptime=$(uptime -p)
  module_output "${uptime/up}" "uptime"
}

function kernel_info {
  aaaaa="$(<"/proc/version")"
  IFS=$'\n' read -d "" -ra arr <<< "${aaaaa//\ /$'\n'}"
  module_output "${arr[2]}" "kernel"
}

function distro_info {
  module_output "$distro" "distro"
}

function main {
  reset="\e[m"
  source /etc/os-release
  export distro=$PRETTY_NAME distro_id=$ID
  [ -e "distro/$distro_id" ] && source "distro/$distro_id" || source "distro/unknown"
  if [ -e "${HOME}/.config/hyperfetch/config" ];then
    source ${HOME}/.config/hyperfetch/config
  else
    infos=(title distro kernel model uptime packages shell term mem_fancy wm cpu gpu) 
    distro_prefix="Distro${reset}: "
    kernel_prefix="Kernel${reset}: "
    uptime_prefix="Uptime${reset}:"
    shell_prefix="Shell${reset}: "
    packages_prefix="Packages${reset}: "
    memory_prefix="Memory${reset}: "
    wm_prefix="WM${reset}:"
    cpu_prefix="CPU${reset}: "
    gpu_prefix="GPU${reset}: "
    term_prefix="Terminal${reset}: "
    mem_fancy_prefix="Memory${reset}: "
    model_prefix="Device${reset}: "
    prefix_format="\e[1;38;5;5m"
    ascii_show=1
    ascii_distro="${distro_id}"
  fi
  [ "$ascii_show" = "1" ] && {
    get_ascii_xy "$ascii_distro"
    logo "${ascii_distro}" &
  }
  [ -e "/run/user/$UID/hyperfetch" ] || mkdir /run/user/$UID/hyperfetch/ &
  info_amount=${#infos[@]};
  for ((i=0; i<$info_amount; i++)) {
    ${infos[i]}_info &
  }
  wait
  printf "\e[${ascii_height}A"
  for ((i=0; i<$info_amount; i++)) {
    mapfile -t info < /run/user/$UID/hyperfetch/${infos[i]}
    prefix=${infos[i]}_prefix
    printf "\e[1000D\e[${ascii_width}C${prefix_format}${!prefix}${info[@]}\n"
  }
  [ "$ascii_height" = 0 ] || echo -e "\e[$(( $ascii_height - $info_amount ))B"
}

main $@
