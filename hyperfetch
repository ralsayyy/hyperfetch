#!/bin/sh
# kill the script if something errors out
#set -e
# disable unicode
export LC_ALL=C
export LANG=C
# set the uid
[ "$UID" = "" ] && export UID=$(id -u)
export OSTYPE=$(uname)

module_output() {
  echo "$1" > "$TEMP_PREFIX/$UID/hyperfetch/$2"
}

gpu_info() {
  case $OSTYPE in 
  Linux) 
  lspci > $TEMP_PREFIX/$UID/hyperfetch/lspci
  get_line_content "$TEMP_PREFIX/$UID/hyperfetch/lspci" "VGA"
  case $line_content in 
    *"NVIDIA"*) 
      IFS=\[
      set -- $line_content
      gpu="$2"
      IFS=\]
      set -- $gpu
      gpu="NVIDIA $1"
      IFS=" ";;
    *)
      IFS=:
      set -- $line_content
      gpu=$2
      IFS=" "
  esac;;
  Darwin) [ -e "$TEMP_PREFIX/$UID/hyperfetch/gpu_cache" ] && {
    read -r gpu < "$TEMP_PREFIX/$UID/hyperfetch/gpu_cache"
  } || {
    gpu=$(system_profiler SPDisplaysDataType | grep "Chipset Model:")
    IFS=":"
    set -- $gpu
    gpu=$2
    IFS=""
  };;
  esac
  echo "$gpu" > $TEMP_PREFIX/$UID/hyperfetch/gpu_cache
  module_output "$gpu_prefix$gpu" "gpu"
}

# from https://github.com/dylanaraps/pure-sh-bible#trim-all-white-space-from-string-and-truncate-spaces
trim_all() {
    # Usage: trim_all "   example   string    "
    set -f
    set -- $*
    trimmed_string="$*"
    set +f
}

# from https://github.com/dylanaraps/pure-sh-bible#get-the-base-name-of-a-file-path
# Usage: basename_sh "path" ["suffix"]
basename_sh() {
    dir=${1%${1##*[!/]}}
    dir=${dir##*/}
    dir=${dir%"$2"}
    basename="${dir:-/}"
}

# gets the first line containing a certain string from a file
# usage get_line <file> <string to search for>
# outputs in a variable called line_content
get_line_content() {
  while read -r line; do 
    case "$line" in
      *"${2}"*) line_content="$line"; return;;
    esac
  done < "$1"
}

# gets certain line from a file
# usage: get_line <file> <line>
# outputs it in a variable called line
get_line() {
  i=1
  while read -r file || [ -n "$file" ]; do
    [ "$i" = "$2" ] && line="${file}" && return
    i=$(( $i + 1 ))
  done < "$1"
}

# prints file from stdin
print_ascii() {
  printf "$prefix_format"
  while IFS= read -r line || [ -n "$line" ]; do
    echo "$line"
  done < /dev/stdin
}

### ascii art start
logo() {
case $ascii_distro in
bedrock)
 print_ascii <<-EOF
--------------------------------------
--------------------------------------
--------------------------------------
---\\\\\\\\\\\\\\\\\\\\\\\\-----------------------
----\\\\\\      \\\\\\----------------------
-----\\\\\\      \\\\\\---------------------
------\\\\\\      \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\------
-------\\\\\\                    \\\\\\-----
--------\\\\\\                    \\\\\\----
---------\\\\\\        ______      \\\\\\---
----------\\\\\\                   ///---
-----------\\\\\\                 ///----
------------\\\\\\               ///-----
-------------\\\\\\////////////////------
--------------------------------------
--------------------------------------
--------------------------------------
EOF
;;
arch) 
  print_ascii <<-EOF
               -@
              .##@
             .####@
             @#####@
           . *######@
          .##@o@#####@
         /############@
        /##############@
       @######@**%######@
      @######\`     %#####o
     @######@       ######%
   -@#######h       ######@.\`
  /#####h**\`\`       \`**%@####@
 @H@*\`                    \`*%#@
*\`                            \`*
EOF
;;
gentoo) 
  print_ascii <<-EOF
         -/oyddmdhs+:.
     -odNMMMMMMMMNNmhy+-\`
   -yNMMMMMMMMMMMNNNmmdhy+-
 \`omMMMMMMMMMMMMNmdmmmmddhhy/\`
 omMMMMMMMMMMMNhhyyyohmdddhhhdo\`
.ydMMMMMMMMMMdhs++so/smdddhhhhdm+\`
 oyhdmNMMMMMMMNdyooydmddddhhhhyhNd.
  :oyhhdNNMMMMMMMNNNmmdddhhhhhyymMh
    .:+sydNMMMMMNNNmmmdddhhhhhhmMmy
       /mMMMMMMNNNmmmdddhhhhhmMNhs:
    \`oNMMMMMMMNNNmmmddddhhdmMNhs+\`
  \`sNMMMMMMMMNNNmmmdddddmNMmhs/.
 /NMMMMMMMMNNNNmmmdddmNMNdso:\`
+MMMMMMMNNNNNmmmmdmNMNdso/-
yMMNNNNNNNmmmmmNNMmhs+/-\`
/hMMNNNNNNNNMNdhs++/-\`
\`/ohdmmddhys+++/:.
EOF
;;
macos)
#source: https://www.asciiart.eu/computers/apple
print_ascii <<-EOF
                          .8 
                      .888
                    .8888'
                   .8888'
                   888'
                   8'
      .88888888888. .88888888888.
   .8888888888888888888888888888888.
 .8888888888888888888888888888888888.
.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
\`%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.
 \`00000000000000000000000000000000000'
  \`000000000000000000000000000000000'
   \`0000000000000000000000000000000'
     \`###########################'
      \`#######################'
         \`#########''########'
           \`""""""'  \`"""""'
EOF
;;
*) : ;;
esac
}
### ascii art end
model_info() {
  case $OSTYPE in 
    Linux) read -r model < /sys/devices/virtual/dmi/id/product_name;;
    Darwin) model="$(sysctl -n hw.model)";;
  esac
  module_output "$model_prefix$model" "model"
}

mem_fancy_info() {
  case $OSTYPE in
    Linux)
      # free memory
      get_line /proc/meminfo 3
      trim_all $line
      set -- $trimmed_string
      free_mem="$2"
      # total memory
      get_line /proc/meminfo 1
      trim_all $line
      set -- $trimmed_string
      total_mem="$2";;
    Darwin) free_mem=$(( $(vm_stat | awk '/Pages free:/ { printf "%.0f \n", $3}') * 4096 ))
            total_mem=$(sysctl -n hw.memsize);;
  esac
  mem_percent=$(( ($total_mem - $free_mem) / ($total_mem / 100) ))
  elapsed=$(($mem_percent*15/100))
  i=0
  while [ $i != ${elapsed} ]; do
    prog="${prog} ●"
    i=$(( $i + 1 ))
  done
  i=0
  while [ $i != $(( 15 - elapsed )) ]; do
    total="${total} ○"
    i=$(( $i + 1 ))
  done
  module_output "$mem_fancy_prefix(${prog}${total} )" "mem_fancy"
}

get_ascii_xy() {
  # ascii width is (width of ascii art + 2)
  case "$1" in 
    "arch") export ascii_width=34 ascii_height=15;;
    "gentoo") export ascii_width=37 ascii_height=17;;
    "bedrock") export ascii_width=40 ascii_height=17;;
    "macos") export ascii_width=39 ascii_height=25;;
    *) export ascii_width=0 ascii_height=0;;
  esac
}

title_info() {
  module_output "$USER\033[m@${prefix_format}${HOSTNAME:-$(hostname)}" "title"
}

term_info() {
  case $OSTYPE in 
  Linux)  read parent_stat < /proc/$PPID/stat
          set -- $parent_stat
          read terminal < /proc/$4/comm;;
  Darwin) terminal=$TERM_PROGRAM;;
  esac
  module_output "$term_prefix$terminal" "term"
}

cpu_info() {
  case $OSTYPE in 
    Linux)  
      get_line /proc/cpuinfo 5
      IFS=":"
      set -- $line
      cpu="$2"
      IFS=" "
    ;;
    Darwin) cpu=" $(sysctl -n machdep.cpu.brand_string)";;
  esac 
  module_output "$cpu_prefix${cpu}" "cpu"
}

wm_info() {
  case $OSTYPE in 
    Linux)
    wm=$(wmctrl -m | awk '/Name: / {printf "%s\n", $2}');;
    Darwin) wm="quartz";;
  esac
  module_output "${wm_prefix}$wm" "wm"
}

memory_info() {
  case $OSTYPE in
    Linux)
      # free memory
      get_line /proc/meminfo 3
      trim_all $line
      set -- $trimmed_string
      free_mem="$2"
      # total memory
      get_line /proc/meminfo 1
      trim_all $line
      set -- $trimmed_string
      total_mem="$2"
      module_output "${memory_prefix}$(( $total_mem / 1024 - $free_mem / 1024 ))M / $((total_mem / 1024))M" "memory";;
    Darwin) 
          # TODO: fix this
          total_mem=$(( $(sysctl -n hw.memsize) / 1024 / 1024 ))
          vm_stat=$(vm_stat)
          used_mem=$(( $(echo $vm_stat | awk '/Pages wired:/ { printf "%.0f \n", $4}') + $(echo $vm_stat | awk '/Pages occupied:/ {printf "%.0f \n", $5}')+ $(echo $vm_stat | awk '/Pages active:/ { printf "%.0f \n", $3}') * 4 / 1024))
          module_output "${memory_prefix}${used_mem}M / ${total_mem}M" "memory";; 
  esac
}

shell_info() {
  basename_sh "$SHELL"
  module_output "${shell_prefix}$basename" "shell"
}

uptime_info() {
  case $OSTYPE in
  Linux)read uptime < /proc/uptime
        IFS=.
        set -- $uptime
        #the amount of secounds the system is up
        uptime_first=$1
        IFS=" "
        hours=$((uptime_first / 3600));;
  Darwin)
    last_reboot=$(sysctl -n kern.boottime)
    IFS="="
    set -- $last_reboot
    last_rebooot=$2
    IFS=,
    set -- $last_reboot
    last_reboot=$1
    IFS=" "
    set -- $last_reboot
    uptime_first=$(( $(date +%s) - $4 ))
    hours=" $((uptime_first / 3600))";;
  esac 
  minutes=$((uptime_first % 3600 / 60))
  [ $hours = 0 ] || uptime_hours=" $hours hours,"
  module_output "$uptime_prefix${uptime_hours} $minutes minutes" "uptime"
}

kernel_info() {
  kernel_release=$(uname -r)
  case $OSTYPE in
    Linux) kernel=$kernel_release;;
    Darwin) kernel="Darwin $kernel_release";;
  esac
  module_output "$kernel_prefix$kernel" "kernel"
}

distro_info() {
  module_output "$distro_prefix$distro" "distro"
}

has() {
  command -v $1 >/dev/null
  return $?
}

packages_info() {
  {
    printf "$packages_prefix"
    has qlist &> /dev/null && {
      qlist -IC | wc -l | tr -d "\n"; printf " (emerge) "
    } &
    has pacman-key &> /dev/null && {
      pacman -Q | wc -l | tr -d "\n"; printf " (pacman) "
    } &
    # dash seems to think homebrew is installed on a system it isn't installed on?
    has brew &> /dev/null && {
      [ -e "/usr/local/Cellar" ] &&  {
        ls -1 /usr/local/Cellar/ | wc -l | tr -d "\n"; printf " (brew)"
      }
    } &
    wait
  } > $TEMP_PREFIX/$UID/hyperfetch/packages
}

colors() {
  i=0
  while [ "$i" != 8 ]; do
    colors_1="${colors_1}\033[48;5;${i}m   "
    i=$(( $i + 1 ))
  done
   while [ "$i" != 16 ]; do
    colors_2="${colors_2}\033[48;5;${i}m   "
    i=$(( $i + 1 ))
  done
  printf "$colors_1$reset" > $TEMP_PREFIX/$UID/hyperfetch/colors_1
  printf "$colors_2$reset" > $TEMP_PREFIX/$UID/hyperfetch/colors_2
}

main() {
  case $OSTYPE in 
    Linux) TEMP_PREFIX=/run/user;;
    Darwin) TEMP_PREFIX=/tmp;;
  esac
  mkdir -p $TEMP_PREFIX/$UID/hyperfetch/
  reset="\033[m"
  case $OSTYPE in 
    Linux) 
     [ -e "/bedrock/strata/bedrock/etc/os-release" ] && . /bedrock/etc/os-release || . /etc/os-release
      export distro=$PRETTY_NAME distro_id=$ID;;
    Darwin)
      export distro="macOS $(sysctl -n kern.osproductversion)"
      export distro_id=macos;;
  esac
  if [ -e "${HOME}/.config/hyperfetch/config" ];then
    . ${HOME}/.config/hyperfetch/config
  else
    infos="title distro kernel model mem_fancy uptime shell term wm cpu gpu" 
    distro_prefix="Distro${reset}: "
    kernel_prefix="Kernel${reset}: "
    uptime_prefix="Uptime${reset}:"
    shell_prefix="Shell${reset}: "
    packages_prefix="Packages${reset}: "
    memory_prefix="Memory${reset}: "
    wm_prefix="WM${reset}:"
    cpu_prefix="CPU${reset}:"
    gpu_prefix="GPU${reset}: "
    term_prefix="Terminal${reset}: "
    mem_fancy_prefix="Memory${reset}: "
    model_prefix="Device${reset}: "
    prefix_format="\033[1;38;5;5m"
    ascii_show=1
    ascii_distro="${distro_id}"
    colors_show=1
  fi
   {
    set -f
    set +f -- ${infos}
    infos_amount="$#"
    [ "$ascii_show" = 1 ] && {
      get_ascii_xy "$ascii_distro"
      logo "${ascii_distro}" &
    } || ascii_height=0 ascii_width=0
    [ "$colors_show" = 1 ] && {
      colors &
      infos_amount=$(( $infos_amount + 3 ))
    }
    for infos do 
      ${infos}_info &
    done
    wait
    [ "$ascii_height" != 0 ] && printf "\033[${ascii_height}A"
    for infos do
      read -r info < $TEMP_PREFIX/$UID/hyperfetch/${infos}
      printf "\033[1000D\033[${ascii_width}C${prefix_format}${info}\n"
    done
    [ "$colors_show" = 1 ] && {
      read -r info < $TEMP_PREFIX/$UID/hyperfetch/colors_1
      printf "\n\033[1000D\033[${ascii_width}C$info"
      read -r info < $TEMP_PREFIX/$UID/hyperfetch/colors_2
      printf "\n\033[1000D\033[${ascii_width}C$info\n"
    }
  }
  [ "$ascii_height" = 0 ] || printf "\033[$(( $ascii_height - $infos_amount ))B"
}

main $@
